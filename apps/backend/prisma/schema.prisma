generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  phone              String?              @unique
  password           String?
  role               RoleType             @default(Client)
  isOnline           Boolean              @default(false)
  vehicleId          String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  addressId          String?
  Chat               Chat[]
  ChatMessage        ChatMessage[]
  ChatNotification   ChatNotification[]
  ClientProfile      ClientProfile?
  DeliveryAssignment DeliveryAssignment[]
  DeliveryRequest    DeliveryRequest[]    @relation("InitiatorDeliveries")
  LocationPing       LocationPing[]
  Notification       Notification[]
  Review             Review[]
  ShopProfile        ShopProfile?
  address            Address?             @relation(fields: [addressId], references: [id])
  vehicle            Vehicle?             @relation(fields: [vehicleId], references: [id])
}

model ClientProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model ShopProfile {
  id           String @id @default(cuid())
  userId       String @unique
  businessName String
  user         User   @relation(fields: [userId], references: [id])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Coordinates {
  id        String    @id @default(cuid())
  latitude  Float
  longitude Float
  location  Unsupported("geometry(Point, 4326)")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Address   Address[]
  Route     Route[]   @relation("CoordinatesToRoute")
}

model Address {
  id                String            @id @default(cuid())
  name              String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  coordinatesId     String?
  coordinates       Coordinates?      @relation(fields: [coordinatesId], references: [id])
  dropoffDeliveries DeliveryRequest[] @relation("DropoffLocation")
  pickupDeliveries  DeliveryRequest[] @relation("PickupLocation")
  users             User[]
}

model Vehicle {
  id          String      @id @default(cuid())
  plateNumber String      @unique
  model       String
  type        VehicleType
  capacityKg  Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  users       User[]
}

model DeliveryRequest {
  id               String              @id @default(cuid())
  initiatorType    RoleType
  initiatorId      String
  pickupAddressId  String
  dropoffAddressId String
  status           DeliveryStatus      @default(PENDING)
  scheduledAt      DateTime?
  deliveredAt      DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  delivery         DeliveryAssignment?
  dropoffAddress   Address             @relation("DropoffLocation", fields: [dropoffAddressId], references: [id])
  initiator        User                @relation("InitiatorDeliveries", fields: [initiatorId], references: [id])
  pickupAddress    Address             @relation("PickupLocation", fields: [pickupAddressId], references: [id])
  payment          Payment[]
  review           Review[]
  route            Route?
  trackingSession  TrackingSession?
}

model DeliveryAssignment {
  id          String          @id @default(cuid())
  driverId    String
  assignedAt  DateTime        @default(now())
  acceptedAt  DateTime?
  pickedUpAt  DateTime?
  deliveredAt DateTime?
  deliveryId  String          @unique
  delivery    DeliveryRequest @relation(fields: [deliveryId], references: [id])
  driver      User            @relation(fields: [driverId], references: [id])
}

model Route {
  id            String          @id @default(cuid())
  estimatedTime Int?
  actualTime    Int?
  path          Json
  deliveryId    String          @unique
  delivery      DeliveryRequest @relation(fields: [deliveryId], references: [id])
  checkpoints   Coordinates[]   @relation("CoordinatesToRoute")
}

model TrackingSession {
  id               String          @id @default(cuid())
  deliveryId       String          @unique
  otpHash          String
  expiresAt        DateTime
  consumed         Boolean         @default(false)
  recipientContact String
  channel          String
  createdAt        DateTime        @default(now())
  delivery         DeliveryRequest @relation(fields: [deliveryId], references: [id])
}

model LocationPing {
  id        String   @id @default(cuid())
  userId    String
  latitude  Float
  longitude Float
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Payment {
  id         String          @id @default(cuid())
  amount     Float
  status     String          @default("PENDING")
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  deliveryId String
  payerId    String
  payerType  RoleType
  delivery   DeliveryRequest @relation(fields: [deliveryId], references: [id])
}

model Review {
  id         String          @id @default(cuid())
  userId     String
  rating     Int
  comment    String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  deliveryId String
  delivery   DeliveryRequest @relation(fields: [deliveryId], references: [id])
  user       User            @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Chat {
  id               String             @id @default(cuid())
  userId           String
  message          String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  user             User               @relation(fields: [userId], references: [id])
  ChatMessage      ChatMessage[]
  ChatNotification ChatNotification[]
}

model ChatMessage {
  id        String   @id @default(cuid())
  chatId    String
  senderId  String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])
}

model ChatNotification {
  id        String   @id @default(cuid())
  chatId    String
  userId    String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}


model SysLog {
  id        String   @id @default(cuid())
  userId    String
  processId String
  details   Json
  params    Json
  createdAt DateTime @default(now())
}



model SysServiceRegistry {
  id          String   @id @default(cuid())
  name        String   @unique
  status      String   @default("ACTIVE")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SysScheduleJob {
  id        String   @id @default(cuid())
  name      String   @unique
  processId String
  status    String   @default("completed")
  log       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SysStoredProc {
  id          String   @id @default(cuid())
  name        String   @unique
  dbName     String
  script      String
  description String?
  parameters  Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SysView {
  id          String   @id @default(cuid())
  name        String   @unique
  dbName      String
  script      String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SysFunction {
  id          String   @id @default(cuid())
  name        String   @unique
  dbName      String
  script      String
  description String?
  parameters  Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum RoleType {
  Guest_Client
  Client
  Shop
  Delivery
  Admin
  SuperAdmin
}

enum VehicleType {
  Bike
  Van
  Truck
  Pickup
}

enum DeliveryStatus {
  PENDING
  ACCEPTED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  CANCELLED
}
